#!/bin/bash

HERE="$(dirname ${BASH_SOURCE[0]})"
NAME="$(basename ${BASH_SOURCE[0]})"
__LOGGER_DEBUG=no
#
#
#
function __DEBUG_ENABLE()
{
	__LOGGER_DEBUG=yes
}
#
#
#
function __DEBUG_DISABLE()
{
	__LOGGER_DEBUG=no
}
#
#
#
function __DEBUG_TOGGLE()
{
	case "${__LOGGER_DEBUG}" in
		yes)
			__LOGGER_DEBUG=no
		;;
		no)
			__LOGGER_DEBUG=yes
		;;
		*)
			echo "${BASH_SOURCE[0]} | FATAL | unknown __DEBUG status : '$_LOGGER_DEBUG'"
			exit 1
		;;
	esac
}
#
#	echoes all parameters if _LOGGER_DEBUG == yes
#
function __DEBUG()
{
	[ "${__LOGGER_DEBUG}" == "yes" ] && echo "__DEBUG | ${*}" &> /dev/stderr
}
#
#
#
function log()
{
	#
	#	date and time
	#
	local _datestamp="$(date +'%Y/%m/%d')"
	local _timestamp="$(date +'%H:%M:%S')"
	#
	#	extract tag and message
	#
	local _level="${1}"
	local _message="${*:2}"
	# local _who_width=0
	
	__DEBUG "$_level: $_message"
	#
	#	check level name
	#
	case ${_level,,} in
		--debug|--info|--warning|--error|--fatal)
			#
			#	remove "__" from level name and capitalize it
			#
			_level="${1:2}"
			_level="${_level^^}"
			#
			#	normalize warn
			#
			[ $_level == WARNING ] && _level=WARN
			#
			#	format level
			#
			printf -v _level "%-5.5s" $_level
		;;
		*)
			echo "${BASH_SOURCE[0]} | FATAL | unknown level name: '$_level'"  >&2
			exit 1
		;;
	esac
	
	__DEBUG "\$0 = $0"
	__DEBUG "\${BASH_SOURCE[0]} = ${BASH_SOURCE[0]}"

	[ $0 = bash ] && {
		#
		#	sourcing from command line, force this script
		#
		_who="${BASH_SOURCE[0]}"
	} || {
		_who="$0"
	}
	
	# printf -v _level "[%*.*s]" $_log_square_width $_log_square_width "$OPTARG"
	local _formatted_who
	printf -v _formatted_who "%16.16s" "$(basename $_who)"
	echo "$_datestamp | $_timestamp | $_formatted_who | $_level | $_message" >&2
}
#
#
#
function debug(){
	[ "${__LOGGER_DEBUG}" == "yes" ] &&	log --debug "$@"
}
#
# define level helper functions
#
function info()    { log --info    "$@"; }
function warning() { log --warning "$@"; }
function warn()    { log --warning "$@"; }
function error()   { log --error   "$@"; }
function fatal()   { log --fatal   "$@"; }
#
# test logger when sourced
#
function test_logger()
{
	debug   test debug
	info    test info
	warning test warning
	error   test error
	fatal   test fatal
	log		wrong_level test
}
#
# source or run
#
if [ "${BASH_SOURCE[0]}" != "${0}" ]
then
	info "SOURCE | ${NAME} | ignoring params: ${@} | ok"
else
	info "RUN | ${NAME} ${@}"
	
	# check if level function exists
	LEVELS=(info warn warning error fatal)
	LEVEL="${1}"
	if echo "${LEVELS[@]}" | grep -qw "${LEVEL,,}"
	then 
		"${LEVEL}" "${@:2}"
	else
		fatal "unknown level | ${LEVEL^^}"
		fatal "syntax: ${NAME} {info|warn|warning|error|fatal} message"
	fi
fi
